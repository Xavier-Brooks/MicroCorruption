Similar to the first level New Orleans I decided to start by investigation the calls and format of the main routine in the code. 

4438 <main>
4438:  3150 9cff      add	#0xff9c, sp
443c:  3f40 b444      mov	#0x44b4 "Enter the password to continue.", r15
4440:  b012 6645      call	#0x4566 <puts>
4444:  0f41           mov	sp, r15
4446:  b012 8044      call	#0x4480 <get_password>
444a:  0f41           mov	sp, r15
444c:  b012 8a44      call	#0x448a <check_password>
4450:  0f93           tst	r15
4452:  0520           jnz	#0x445e <main+0x26>
4454:  3f40 d444      mov	#0x44d4 "Invalid password; try again.", r15
4458:  b012 6645      call	#0x4566 <puts>
445c:  093c           jmp	#0x4470 <main+0x38>
445e:  3f40 f144      mov	#0x44f1 "Access Granted!", r15
4462:  b012 6645      call	#0x4566 <puts>
4466:  3012 7f00      push	#0x7f
446a:  b012 0245      call	#0x4502 <INT>
446e:  2153           incd	sp
4470:  0f43           clr	r15
4472:  3150 6400      add	#0x64, sp

differences from New Orleans(level 1)
	There is no create_password subroutine 
	call to unlock_door in main is replaced with the code for the subroutine from the first level at line 4406

similarities    
	With the exceptionof the create password function everything else occurs in the same order
	granting access requires r15 value to be nonzero at line 4450 

just like the previous level I decided to investigate the check password subroutine to see if the output had any effect on the value of r15 prior to the tst instruction and see if there were any hints that could lead to finding the necessary input.

448a <check_password>
448a:  bf90 5365 0000 cmp	#0x6553, 0x0(r15)
4490:  0d20           jnz	$+0x1c
4492:  bf90 4628 0200 cmp	#0x2846, 0x2(r15)
4498:  0920           jnz	$+0x14
449a:  bf90 6856 0400 cmp	#0x5668, 0x4(r15)
44a0:  0520           jne	#0x44ac <check_password+0x22>
44a2:  1e43           mov	#0x1, r14
44a4:  bf90 4265 0600 cmp	#0x6542, 0x6(r15)
44aa:  0124           jeq	#0x44ae <check_password+0x24>
44ac:  0e43           clr	r14
44ae:  0f4e           mov	r14, r15
44b0:  3041           ret

by moving the value 0x1 into r14 (line 44a2) and moving r14 into r15, the tst jump condition that will unlock the door is met. In order to do this however, the input hex saved at the memory address in r15 must match the hex value of the combined words in each of the compare statements throughout the check_password function. if any one byte is off then the jump statements will change the program counter to 44ac where r14 is leared copied to r15 and r15 is passed as a parameter to the tst function to fail the executionof the unlock in main.

Be warned! Data loaded into memory is done so in the little endian format. bytes in each word of user input is loaded backwards into memory so, thus 0x1234 will appear as 3412 in memory. Since the bytes in the cmp statements of the check password subroutine are being compared directly to bytes in memory the user must type each word word in the compare statements backwards to complete the level.       
Thus user input 5365462868564265 appears as 6553284656686542 which is compared word by word in the check password function.

