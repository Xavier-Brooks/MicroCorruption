 At the start of the first level, I decided to take a look at the various subroutines being called in the main function and tool immediate notice of the create_password, get_password, check_password function being called, in addition to the unlock_door routine beingcalled at the end of main. Below is a code snippet of the main function from the program.
 
 4438 <main>
 4438:  3150 9cff      add	#0xff9c, sp
 443c:  b012 7e44      call	#0x447e <create_password>
 4440:  3f40 e444      mov	#0x44e4 "Enter the password to continue", r15
 4444:  b012 9445      call	#0x4594 <puts>
 4448:  0f41           mov	sp, r15
 444a:  b012 b244      call	#0x44b2 <get_password>
 444e:  0f41           mov	sp, r15
 4450:  b012 bc44      call	#0x44bc <check_password>
 4454:  0f93           tst	r15
 4456:  0520           jnz	#0x4462 <main+0x2a>
 4458:  3f40 0345      mov	#0x4503 "Invalid password; try again.", r15
 445c:  b012 9445      call	#0x4594 <puts>
 4460:  063c           jmp	#0x446e <main+0x36>
 4462:  3f40 2045      mov	#0x4520 "Access Granted!", r15
 4466:  b012 9445      call	#0x4594 <puts>
 446a:  b012 d644      call	#0x44d6 <unlock_door>
 446e:  0f43           clr	r15
 4470:  3150 6400      add	#0x64, sp

 The create_password subroutine places the address 0x2400 into register 15 and stores eight individual bytes into memory using numeric offsets values to store each byte into the next address in memory.
 
 447e:  3f40 0024      mov	#0x2400, r15
 4482:  ff40 3f00 0000 mov.b	#0x3f, 0x0(r15)
 4488:  ff40 3d00 0100 mov.b	#0x3d, 0x1(r15) ;The byte 0x3d is stored at address 0x2401 where the 0x1 is an offset value
 448e:  ff40 2b00 0200 mov.b	#0x2b, 0x2(r15)
 4494:  ff40 3d00 0300 mov.b	#0x3d, 0x3(r15)
 449a:  ff40 3800 0400 mov.b	#0x38, 0x4(r15)
 44a0:  ff40 4500 0500 mov.b	#0x45, 0x5(r15)
 44a6:  ff40 4f00 0600 mov.b	#0x4f, 0x6(r15)
 44ac:  cf43 0700      mov.b	#0x0, 0x7(r15)
 44b0:  3041           ret
 
 After setting a breakpoint on the get_password function and running the program until it reached the breakpoint, I noticed while stepping through the function that the password "AAAAAAAA" I used as a test was stored at the top of the stack at address 0x439c which also happed to be the address the stack pointer held upon return from the get_password function. Immediately afterwards this memory location was stored into register 15 and the check password functionis called.    
 
  
The check password function clears register 14 and iterates through each byte of the password I typed and compares it to each of the bytes from the create_password function. 

44bc:  0e43         clr	r14				
44be:  0d4f         mov	r15, r13			
44c0:  0d5e         add	r14, r13			
44c2:  ee9d 0024    cmp.b @r13, 0x2400(r14)
44c6:  0520         jne	#0x44d2 <check_password+0x16>
44c8:  1e53         inc	r14
44ca:  3e92         cmp	#0x8, r14			  
44cc:  f823         jne	#0x44be <check_password+0x2>
44ce:  1f43         mov	#0x1, r15
44d0:  3041         ret
44d2:  0f43         clr	r15
44d4:  3041         ret

The base address of the user input is stored into register 13, by adding the value in r14 to that of r13 it is gauranteed that the nth byte of my input data will be compared to the nth byte of the create_password data located within the stack. incrementing r14 is a means of accessing the next byte in both the stack and the memory location of the user input. comparing the value of 0x8 to the value of r14 suggest that each byte of my input was equivalent to those in the stack and a value of 1 is loaded into r15. However if any of my input byte values differ from those in the stack r15 is loaded with zero. regardless the subroutine ends and the programs returns to the main routine.

     
From here solving the first level became obvious, the tst instruction determines whether the value in a register is zero or not, upon inspection of the main routine code snippet above, it is obvious that in order to reach the unlock_door subroutine call and beat the level the r15 value must be non-zero upon return from the check_password subroutine. As discussed above this is completed by using the bytes from the create_password subroutine as my input and making sure they are in the correct order to succesfully bypass the jump loop in the check function. 

Utilizing this information and input byte password functionality of the solver on the command window the level was successfully completed.  
