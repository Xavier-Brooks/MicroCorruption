This level was very interesting when I first opened it up. Unlike the last three, the login subroutine was removed and the program went back to using main as the primary routine being executed. 

4438 <main>
4438:  3e40 2045      mov	#0x4520, r14
443c:  0f4e           mov	r14, r15
443e:  3e40 f800      mov	#0xf8, r14
4442:  3f40 0024      mov	#0x2400, r15
4446:  b012 8644      call	#0x4486 <enc>
444a:  b012 0024      call	#0x2400
444e:  0f43           clr	r15

Upon starting this level I noticed with the exception of the two calls being made in main nothing else was really happening. I checked out the enc function alone and notied that it consisted of loops, nested loops, and compare statements all of which would take to long to actually decipher and decided to check out what truly caught my interest the call to the instruction at 02400.

By placing a breakpoint at this call and stepping through I noticed that the program counter was moving through memory starting at 0x2400 all while modifying the stack and status of registers. At this point I realized the program was executing encoded instructions from memory not from the disassembly.

One could step through the function and use the current instruction window to write out the subroutine being executed however if compare statements are embedded in memory there was always the possiblity of missing key instruction that could be used to disassemble the memory instructions so I copied much of the words in memory and used the online assembler to decipher the code.

Upon disassembly of the opcodes from memory the following subroutine for the call to 2400 was produced.

0b12           push	r11
0412           push	r4
0441           mov	sp, r4
2452           add	#0x4, r4
3150 e0ff      add	#0xffe0, sp
3b40 2045      mov	#0x4520, r11
073c           jmp	$+0x10
1b53           inc	r11
8f11           sxt	r15
0f12           push	r15
0312           push	#0x0
b012 6424      call	#0x2464

By performing multiple steps through the code above I noticed that the code above was simply printing the mesage in I/O console asking for the correct password. 

2152           add	#0x4, sp
6f4b           mov.b	@r11, r15
4f93           tst.b	r15
f623           jnz	$-0x12
3012 0a00      push	#0xa
0312           push	#0x0
b012 6424      call	#0x2464
2152           add	#0x4, sp
3012 1f00      push	#0x1f
3f40 dcff      mov	#0xffdc, r15
0f54           add	r4, r15
0f12           push	r15
2312           push	#0x2
b012 6424      call	#0x2464
3150 0600      add	#0x6, sp

Further steps through the subroutine proved to me that the interrupt call above simply retrieves user input from the user. With this knowledge and the use of the lock manual I found that pushing the byte 0x7f to the stack prior to calling the hidden INT function will unlock the door.    

b490 b67b dcff cmp	#0x7bb6, -0x24(r4)
0520           jnz	$+0xc
3012 7f00      push	#0x7f
b012 6424      call	#0x2464

In order to unlock the door I noticed that the compare statement above must be satisfied where the word at address r4-36 must be 7bb6 in order for PC to hit the unlock door call.

2153           incd	sp
3150 2000      add	#0x20, sp
3441           pop	r4
3b41           pop	r11
3041           ret
1e41 0200      mov	0x2(sp), r14
0212           push	sr
0f4e           mov	r14, r15
8f10           swpb	r15
024f           mov	r15, sr
32d0 0080      bis	#0x8000, sr
b012 1000      call	#0x10
3241           pop	sr

The address holding the value being compared just so happens to be 0x43da the same address that my input was held. remembering little endianess, by typing b67b as my input the pc skipped over  the jnz instruction fell through to the push 7f statement and unlocked the door granting me access. 
