At this point I made it a habit of checking the contents of the main routine whenever I started a new level. However upon 
starting this I found that main simply held two responsibilities calling a never before seen function "login", and clearing r15 
upon return from login. Below is a snippet of the program showing the main routine.

4438 <main>
4438:  b012 2045      call	#0x4520 <login>
443c:  0f43           clr	r15
443e <__stop_progExec__>
443e:  32d0 f000      bis	#0xf0, sr
4442:  fd3f           jmp	#0x443e <__stop_progExec__+0x0>

checking login was the only course of action to be taken.

4520 <login>
4520:  c243 1024      mov.b	#0x0, &0x2410
4524:  3f40 7e44      mov	#0x447e "Enter the password to continue.", r15
4528:  b012 de45      call	#0x45de <puts>
452c:  3f40 9e44      mov	#0x449e "Remember: passwords are between 8 and 16 characters.", r15
4530:  b012 de45      call	#0x45de <puts>
4534:  3e40 1c00      mov	#0x1c, r14
4538:  3f40 0024      mov	#0x2400, r15
453c:  b012 ce45      call	#0x45ce <getsn>
4540:  3f40 0024      mov	#0x2400, r15
4544:  b012 5444      call	#0x4454 <test_password_valid>
4548:  0f93           tst	r15
454a:  0324           jz	$+0x8
454c:  f240 c000 1024 mov.b	#0xc0, &0x2410
4552:  3f40 d344      mov	#0x44d3 "Testing if password is valid.", r15
4556:  b012 de45      call	#0x45de <puts>
455a:  f290 f200 1024 cmp.b	#0xf2, &0x2410
4560:  0720           jne	#0x4570 <login+0x50>
4562:  3f40 f144      mov	#0x44f1 "Access granted.", r15
4566:  b012 de45      call	#0x45de <puts>
456a:  b012 4844      call	#0x4448 <unlock_door>
456e:  3041           ret
4570:  3f40 0145      mov	#0x4501 "That password is not correct.", r15
4574:  b012 de45      call	#0x45de <puts>
4578:  3041           ret


unlike the main of the previous two levels, login acts as a wrapper function that handles the program for the most part.
In addition, two return instructions occur in this subroutine, one that unlocks the door as we desire prior to the return to 
main, and another that denies us access before retuning to main. Since main doesn't call upon any other subroutines or perform 
any instruction itself the program counter would simply fall through to the _stop_progExec_ subroutine and stop the cpu unless I 
found the correct input.

In order to avoid this return case, the comp.b statement tell us that the value at address 0x2410 must be 0xf2(the hex ascii for 
"c"). The string printed at the beginning of the login subroutine also tells us that my input must be between 8 and 16 
characters(or 8 to 16 bytes), however, as I would discover this is just a distraction and after a few minutes of observation I 
realized the code provided states otherwise. 
    
45ce <getsn>
45ce:  0e12           push	r14
45d0:  0f12           push	r15
45d2:  2312           push	#0x2
45d4:  b012 7a45      call	#0x457a <INT>
45d8:  3150 0600      add	#0x6, sp
45dc:  3041           ret

The getsn subroutine utilizes the 0x2 interrupt shown in the lock manual on the website, the value currently at the top of the 
stack during this call is the base address for user input and the second value on the stack is the amount of bytes The user may 
type for the program to read. since the stack follows a LIFO (Last in First out) structure the amouont of bytes to read must be 
pushed on the stack first and the base address second. prior to calling getsn r14=0x1c (28 in decimal) and r15=0x2400 the address 
to store the user input. Thus I was actually allowed a total of 28 characters contrary to what the string told me. Thus the 17th 
byte of my input needed to be f2("c") since the address 2400 is included in holding input bytes.

I decided to test "AAAAAAAAAAAAAAAAc" which should be able to pass the comp.b statement proving that test_password was just a 
subroutine present to scare users away from the general solution, however later on I should be careful of the possible effects 
test_password could have on code execution. By placing "0x1c" into r14 more input is accepted from the user than necessary which 
enabled me to bypass the lock, a simple case of buffer overflow.  
